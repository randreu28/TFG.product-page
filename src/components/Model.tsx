/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useSpecStore } from "../specStore";

type GLTFResult = GLTF & {
  nodes: {
    body_1: THREE.Mesh;
    body_2: THREE.Mesh;
    body_3: THREE.Mesh;
    connector: THREE.Mesh;
    cushion: THREE.Mesh;
    cushionExterior: THREE.Mesh;
    cushionSides: THREE.Mesh;
    separator: THREE.Mesh;
  };
  materials: {
    exteriorBody: THREE.MeshStandardMaterial;
    leds: THREE.MeshStandardMaterial;
    interiorBody: THREE.MeshStandardMaterial;
    smConnector: THREE.MeshStandardMaterial;
    interiorCushion: THREE.MeshStandardMaterial;
    exteriorCushion: THREE.MeshStandardMaterial;
    midCushion: THREE.MeshStandardMaterial;
    connector: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/model.glb") as unknown as GLTFResult;

  const { color } = useSpecStore();

  switch (color) {
    case "black":
      materials.interiorBody.color = new THREE.Color("black");
      break;

    case "white":
      materials.interiorBody.color = new THREE.Color("#888888");
      break;

    case "blue":
      materials.interiorBody.color = new THREE.Color("#23677c");
      break;
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.body_1.geometry}
        material={materials.exteriorBody}
      />
      <mesh geometry={nodes.body_2.geometry} material={materials.leds} />
      <mesh
        geometry={nodes.body_3.geometry}
        material={materials.interiorBody}
      />
      <mesh
        geometry={nodes.connector.geometry}
        material={materials.smConnector}
      />
      <mesh
        geometry={nodes.cushion.geometry}
        material={materials.interiorCushion}
      />
      <mesh
        geometry={nodes.cushionExterior.geometry}
        material={materials.exteriorCushion}
      />
      <mesh
        geometry={nodes.cushionSides.geometry}
        material={materials.midCushion}
      />
      <mesh
        geometry={nodes.separator.geometry}
        material={materials.connector}
      />
    </group>
  );
}

useGLTF.preload("/model.glb");
